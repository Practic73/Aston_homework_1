/**
* Интерфейс для работы с коллекцией объектов,
 * который позволяет создавать, хранить, обрабатывать и управлять
 * объектами.
*/
interface MyCollection<T>{
    /**
     * Возвращает текущее количество элементов в коллекции.
     *
     * @return количество объектов в коллекции.
     * */
    int size();
}

/**
 * Расширяет интерфейс MyCollection и представляет
 * собой упорядоченную коллекцию объектов с возможностью
 * дублирования элементов.
 * */
interface MyListInterface<T> extends MyCollection{
    /**
     * Вставляет указанный элемент в список по указанному индексу.
     * Существующие элементы сдвигаются вправо.
     *
     * @param element объект для вставки.
     * */
    void add(int index, T element);

    /**
     * Удаляет элемент из списка по указанному индексу и
     * возвращает удаленный элемент.
     *
     * @param index индекс удаляемого объекта.
     * @return удаляемый объект.
     * */

    /**
     * Возвращает элемент из списка по указанному индексу.
     *
     * @param index индекс возвращаемого объекта.
     * @return найденный объект.
     * */
    T remove(int index);

    /**
     * Возвращает элемент из списка по указанному индексу.
     *
     * @param index индекс возвращаемого объекта.
     * @return найденный объект.
     * */
    T get(int index);

    /**
     * Заменяет элемент в списке по указанному индексу
     * новым элементом и возвращает старый элемент.
     *
     * @param index индекс изменяемого объекта.
     * @param element объект, который будет записан.
     * @return старый объект, который заменили.
     * */
    T set(int index, T element);

    /**
     * Возвращает представление списка, ограниченное указанными
     * индексами fromIndex (включительно) и toIndex (исключительно).
     *
     * @param fromIndex индекс начала представления.
     * @param toIndex индекс конца представления.
     * @return представление списка.
     * */
    MyArrayList<T> subList(int fromIndex, int toIndex);
}
